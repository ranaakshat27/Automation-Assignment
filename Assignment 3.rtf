{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9                                                                            \b Assignment-13\par
                                                                        Testing Techniques \par
\b0\par
1) What do you understand by the term Boundary Value Analysis ?\par
Ans: Boundary Value Analysis plays an important testing role where the boundary values are being tested such as logical conditions and constrains, For analysis we devide the values in two ways i.e. 2 value analysis and 3 value analysis. It is very important to test properly as if wrong then lies in another division. \par
2  value Analysis - We will take less than and on the boundary value. \par
3 value Analysis - Here we will test less than, more than and on the boundary values.\par
It is also termed as improved equivalence partition.\par
\par
2) How does Boundary Value Analysis differ from Equivalence Partitioning ?\par
Ans: In Boundary value Analysis we devide as per the boundaries and in equivalence devided into two parts and covers the whole test cases.\par
In Equivalence partitioning lesser test cases covers the  maximum coverage but boundary value is the improved form of equivalence partition.\par
Equivalence partioning doest deals with boundary values while boundary values analysis divides in two ways i.e. 2 value analysis and 3 value analysis.\par
\par
3) How can you use Boundary Value Analysis to test a program that accepts employee ID as an input ?\par
Ans: Here we can check the uniqueness of employee id.\par
\par
4) Why do you think it\rquote s important to have multiple test cases for testing boundaries ?\par
Ans: Its important to have multiple test cases for testing boundaries to cover all the test cases. \par
For maximum coverage and best result.\par
To check less than, greater than and on the boundary value.\par
  \par
5) How to apply the Error guessing technique ?\par
Ans: Error guessing is an art rather than technique.\par
Testing through common sense.\par
It is an art developed by practising more.\par
  \par
6) What are the Pitfalls of error guessing technique ?\par
Ans: Pitfalls of error guessing technique are as -\par
This technique is for experienced testers.\par
It is not a method it is all about experience and practice.\par
Unprofessional can leads to the failure of test cases.\par
Wrong implementations and wrong guess can cause failure.\par
\par
7) What is Test Data ?\par
Ans: It is an input given during test execution.\par
It is the process used to check the function and working of existing elements.\par
 \par
8) What is the use of the cause and effect diagram ?\par
Ans: It is a tool used to represent a relationship.\par
It is used to logically organise possible causes for a specific problem by graphically displaying them in increasing details.\par
Identifies all the likely causes of a problem\par
It shows the relationship between the causes and effects.\par
\par
9) What is decision table testing when should we use it? Write down the guidelines to create Good Decision Tables.\par
Ans: It involves testing the behavior of a system when any components involves logical conditions in it and system needs to be verified for different combinations of the conditions.\par
The input conditions are stated in such way that they can either true or false. \par
Guidelines to create Good Decision Tables :\par
Step 1 \f1\endash  Analyze the requirement and create the first column\f0\lang16393 .\par
Step 2: Add Columns.\par
Step 3: Reduce the table.\par
Step 4: Determine actions.\par
Step 5: Write test cases.\lang9\par
\par
10) Explain random/monkey testing ?\par
Ans: It is a software testing technique where the user checks the application by giving random inputs; that's why it is also known as Random testing.\par
If we don't have enough time to write and perform the tests, we will implement the monkey testing.\par
\par
11) ) What is negative and positive testing ?\par
Ans: Positive testing is a sort of testing that is conducted on a software program using legitimate data sets as input. It determines whether or whether the software program acts as predicted when given favorable input. Positive testing is done to ensure that the software program accomplishes precisely what it is supposed to accomplish.\par
Negative testing is a way of evaluating a software program that uses faulty or incorrect sets of data as input. It determines if the software program responds as predicted to negative or inappropriate user input. Negative testing ensures that the software program does not collapse and stays stable in the presence of incorrect data inputs.\par
\par
12) What are the advantages of using Boundary Value Analysis over Equivalence Partitioning ?\par
Ans: Boundary Value Analysis is a more thorough testing method than Equivalence Partitioning because it tests not only for valid and invalid input, but also for input that is on the boundary between being valid and invalid. This means that Boundary Value Analysis is more likely to uncover errors in the software being tested.\par
\par
13) What are the main steps involved in performing Boundary Value Analysis ?\par
Ans: The main steps involved in performing Boundary Value Analysis are:\par
1. Identify the boundary values for the input data.\par
2. Test the system with the boundary values.\par
3. Identify any errors that occur.\par
4. Correct the errors and retest the system.\par
\par
14) Write down the disadvantages of decision table.\par
Ans:\par
 1 . Decision table can not express the complete sequence of operations to solve a problem, It may be difficult for a programmer to translate a decision table directly into a computer program.\par
2 . When there are two many alternatives, decision table cannot  list them all.\par
3 . Decision table does not depict the flow of logic for the solution to a given problem.\par
\par
15) What is Test Data Generation ? Why test data should be created before test execution ?\par
Ans: Test Data in Software Testing is the input given to a software program during test execution. Test data is used for both positive testing to verify that functions produce expected results for given inputs and for negative testing to test software ability to handle unusual, exceptional or unexpected inputs.\par
Test data should be created before test execution  because it is difficult to handle test data management otherwise. Since in many testing environments creating test data takes multiple pre-steps or very time-consuming test environment configurations. \par
\par
16) What is the difference between the STLC (Software Testing Life Cycle) and SDLC (Software Development Life Cycle) ?\par
Ans: \ul\b STLC (Software Testing Life Cycle) :-\par
\ulnone\b0 STLC is mainly related to software testing.\par
It focuses only on testing the software.\par
STLC involves only five phases or steps.\par
In STLC, less number of members (testers) are needed.\par
In STLC, testing team(Test Lead or Test Architect) makes the plans and designs.\par
Goal of STLC is to complete successful testing of software.\par
It helps in making the software defects free.\par
STLC phases are performed after SDLC phases.\par
Regression tests are run by QA team to check deployed maintenance code and maintains test cases and automated scripts.\par
\ul\b SDLC (Software Development Life Cycle) :-\par
\ulnone\b0 SDLC is mainly related to software development.\par
Besides development other phases like testing is also included.\par
SDLC involves total six phases or steps.\par
In SDLC, more number of members (developers) are required for the whole process.\par
In SDLC, development team makes the plans and designs based on the requirements.\par
Goal of SDLC is to complete successful development of software.\par
It helps in developing good quality software.\par
SDLC phases are completed before the STLC phases.\par
Post deployment support , enhancement , and update are to be included if necessary.\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
}
 